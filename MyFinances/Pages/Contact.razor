@page "/contact"

@using System.Net.Mail
@using MyFinances.Models
@using MyFinances.Data
@using MyFinances.Components.Modals

@inject Data.MailService MailService
@inject Data.DataBaseConnService userAccountService
@inject AuthenticationStateProvider authStateProvider;

<div class="card mx-auto mt-5">
    <LoadingModal IsLoading="isProcessing" LoadingText="Wysyłanie wiadomości E-Mail">

        <div class="card-header">
            Formularz kontaktowy
        </div>

        <div class="card-body">
            <EditForm Model="model" OnValidSubmit="SendMail">

                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group" style="margin: 15px">
                    <label>Email</label>
                    <div class="input-group"><input @bind="model.Email" class="form-control" placeholder="Wpisz swój adres e-mail"></div>
                </div>

                <div class="form-group" style="margin: 15px">
                    <label>Treść Wiadomości</label>
                    <textarea @bind="model.EmailMessage" class="form-control" style="min-height:200px;width:100%;max-width:500px" placeholder="Wpisz swoją wiadomość"></textarea>
                </div>

                <button class="btn btn-primary btn-center" style="min-width:250px">Wyślij wiadomość E-Mail</button>

            </EditForm>

            @if (sendMailInfoOpen)
            {
                <EmailInfoModal ServiceResponse="@message" OnClose="@OnSendMailInfoClose"></EmailInfoModal>
            }

        </div>
    </LoadingModal>
</div>

@code {
    private ContactResponse message { get; set; }
    private ContactMessageModel model = new ContactMessageModel();
    private bool isProcessing;
    private bool sendMailInfoOpen = false;

    private void OnSendMailInfoClose(bool accepted) => sendMailInfoOpen = false;

    private void OpenDebentureInfoDialog() => sendMailInfoOpen = true;

    private async Task SendMail()
    {
        isProcessing = true;
        try
        {
            await Task.Delay(1000);
            message = await MailService.SendMail(model);
        }
        finally
        {
            isProcessing = false;
        }
        OpenDebentureInfoDialog();
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identities.FirstOrDefault().Claims.Count() > 0)
        {
            var userId = authState.User.Identities.FirstOrDefault().Claims.FirstOrDefault(a => a.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value;

            var user = await userAccountService.GetUserAccount(new Guid(userId));
            model.Email = user.email;
        }
    }
}
