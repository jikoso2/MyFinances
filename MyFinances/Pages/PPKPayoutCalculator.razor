@page "/ppkpayoutcalculator"

@using MyFinances.Models
@using MyFinances.Data
@using MyFinances.Helpers
@using MyFinances.Components.Modals
@using MyFinances.Components.Views
@using System.Threading
@using Microsoft.AspNetCore.Components.Web


@inject Data.PPKPayoutService PPKPayoutService


<div class="card mx-auto mt-5">

    <div class="card-header">
        Kalkulator PPK
    </div>

    <div class="card-body">

        <div class="card mx-auto" style="margin-top:20px">
            <div class="card-header">
                Sposób wprowadzania wpłaconych kwot
            </div>
            <div class="btn-group btn-group-toggle" data-toggle="buttons" style="display:flex;margin:20px">
                @foreach (var optionName in toggleGroup.Options)
                {
                    <label class="btn btn-secondary @toggleGroup.GetActive(optionName)" style="color:white">
                        <input type="radio" name="options" autocomplete="off"
                           checked="@(toggleGroup.SelectedOption == optionName)"
                           @onchange="()=>OnChangeButton(optionName)" /> @optionName
                    </label>
                }
            </div>
        </div>
        <p></p>

        @if (dialogOpen)
        {
            <InfoModal Title="Wprowadzanie informacji dotyczących PPK" Text="@HelperInformations.GetPPKPayoutInformation()" OnClose="@OnInfoClose" Width="1200px"></InfoModal>
        }

        <button class="btn btn-primary" style="margin:15px" @onclick="() => OpenInfoDialog()" data="@model"> Informacje dotyczące obliczania wypłat </button>

        <EditForm Model="model" OnValidSubmit="CalculatePPK">

            <DataAnnotationsValidator />
            <ValidationSummary />

            @switch (toggleGroup.SelectedOption)
            {
                case PayoutType.Całość:
                    <div class="form-group" style="margin: 15px">
                        <label>Kwota zgromadzona na PPK</label>
                        <div class="input-group"><input @bind="model.Amount" class="form-control"><div class="input-group-append"><span class="input-group-text">zł</span></div></div>
                    </div>
                    break;

                case PayoutType.Cześciami:
                    <div class="form-group" style="margin: 15px">
                        <label>Kwota wpłacona przez pracodawce</label>
                        <div class="input-group"><input @bind="model.EmployerAmount" class="form-control"><div class="input-group-append"><span class="input-group-text">zł</span></div></div>
                    </div>
                    <div class="form-group" style="margin: 15px">
                        <label>Kwota wpłacona przez pracownika</label>
                        <div class="input-group"><input @bind="model.EmployeeAmount" class="form-control"><div class="input-group-append"><span class="input-group-text">zł</span></div></div>
                    </div>
                    break;

                default:
                    break;
            }

            <div class="form-group" style="margin: 15px">
                <label>Kwota wpłacona przez państwo</label>
                <div class="input-group"><input @bind="model.CountryAmount" class="form-control"><div class="input-group-append"><span class="input-group-text">zł</span></div></div>
            </div>

            <div class="form-group" style="margin: 15px">
                <label>Procent zwrotu</label>
                <div class="input-group"><input @bind="model.Percentage" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
            </div>

            <div class="form-check-label" style="margin:15px">
                <InputCheckbox @bind-Value="model.EarlyPayment" class="form-check-label" id="checkbox" disabled />
                <label class="form-check-label" id="checkbox-label">Wypłata przed 60 rokiem życia</label>
            </div>

            <button type="submit" class="btn btn-primary btn-center"> Oblicz </button>

        </EditForm>
    </div>

    @if (ppkResult != null && ppkResult.PPKPayoutInfo != null)
    {
        <SummaryTable Content="ppkResult.PPKPayoutInfo"></SummaryTable>
    }

</div>


@code {
    private PPKPayoutModel model = new PPKPayoutModel();
    private PPKPayout ppkResult;
    private bool dialogOpen;

    private void OnInfoClose(bool accepted) => dialogOpen = false;
    private void OpenInfoDialog() => dialogOpen = true;

    private async Task CalculatePPK()
    {
        model.PayoutType = toggleGroup.SelectedOption;
        ppkResult = await PPKPayoutService.GetPPKPayoutCalculatedAsync(model);
    }

    private void OnChangeButton(PayoutType optionName)
    {
        toggleGroup.SelectedOption = optionName;
        if (ppkResult != null && ppkResult.PPKPayoutInfo != null)
            ppkResult.PPKPayoutInfo.Clear();
    }

    Helpers.TogglePayoutType toggleGroup = new Helpers.TogglePayoutType()
        {
            SelectedOption = PayoutType.Całość,
            Options = new PayoutType[] { PayoutType.Całość, PayoutType.Cześciami }
        };
}