@page "/debenturescalculator"

@using MyFinances.Models
@using MyFinances.Helpers
@using MyFinances.Components
@using MyFinances.Components.Modals
@using MyFinances.Components.Views

@inject Data.DebentureService DebentureService


<div class="card mx-auto mt-5">
    <div class="card-header">
        Kalkulator Obligacji
    </div>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="CalculateDebentures">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <label style="margin-bottom:20px;margin-right:5px;margin-left:15px">TypObligacji:</label>
            <InputSelect id="debentureType" @bind-Value="model.Type" @onclick="UpdateEarlyRedemptionFee" style="height:30px;width:75px">
                @foreach (var DebentureType in Enum.GetValues(typeof(DebentureType)))
                {
                    <option value="@DebentureType">@DebentureType</option>
                }
            </InputSelect>

            <div class="form-check-label" style="margin:15px">
                <InputCheckbox @bind-Value="model.BelkaTax" class="form-check-label" id="checkbox" />
                <label class="form-check-label" id="checkbox-label"> Uwzględnienie podatku od zysków kapitałowych (19%) </label>
            </div>

            @if (DebentureDialogOpen)
            {
                <InfoModal Title="@("Obligacje " + model.Type.ToString())" Text="@InformationAboutDebenture()" OnClose="@OnDebentureInfoClose"></InfoModal>
            }

            <div class="form-group" style="margin: 15px">
                <label>Ilość obligacji</label>
                <div class="input-group"><input @bind="model.Amount" @bind:event="oninput" class="form-control"><div class="input-group-append"><span class="input-group-text">sztuk</span></div></div>
            </div>

            <div class="alert alert-secondary" role="alert" style="width:fit-content;margin: 15px">
                <span class="mr-2" aria-hidden="true"></span>
                <span id="AmountCalc" class="text-nowrap"> Kwota inwestycji: @(Helper.MoneyFormat(100 * model.Amount)) </span>
            </div>

            @switch (model.Type)
            {
                case DebentureType.EDO:
                case DebentureType.TOS:
                case DebentureType.COI:
                     <section class="w-100 p-0 pb-1 pt-2">
                        <div class="form-group" style="margin: 15px">
                            <label>Opłata za wcześniejszy wykup</label>
                            <div class="input-group"><input @bind="model.EarlyRedemptionFee" @bind:event="oninput" class="form-control"><div class="input-group-append"><span class="input-group-text">zł</span></div></div>
                        </div>
                    </section>
                    break;
                default:
                    break;
            }

            @switch (model.Type)
            {
                case DebentureType.OTS:
                    SwitchDebentureTypeAction();
                    <div class="form-group">
                        <label>Wysokość rocznego oprocentowania</label>
                        <div class="input-group"><input @bind="model.OTSPercentage" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
                    </div>
                    break;

                case DebentureType.DOS:
                    SwitchDebentureTypeAction();
                    <h3>Dane obligacje od 1.06.2022r są wycofane z emisji.</h3>
                    <div class="form-group">
                        <label>Wysokość rocznego oprocentowania</label>
                        <div class="input-group"><input @bind="model.DOSPercentage" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
                    </div>
                    break;

                case DebentureType.TOZ:
                    SwitchDebentureTypeAction();
                    <h3>Dane obligacje od 1.08.2022r są wycofane z emisji.</h3>
                    <PercentageTOZView model="model"></PercentageTOZView>
                    break;

                case DebentureType.EDO:
                    SwitchDebentureTypeAction();
                    <PercentageEDOView model="model"></PercentageEDOView>
                    break;

                case DebentureType.COI:
                    SwitchDebentureTypeAction();
                    <PercentageCOIView model="model"></PercentageCOIView>
                    break;

                case DebentureType.DOR:
                    SwitchDebentureTypeAction();
                    <section class="w-100 p-4 pb-4">
                        <label for="percentageRangeDOR" class="form-label">Referencyjna stopa oprocentowania</label>
                        <div class="range">
                            <input type="range" class="form-range" min="0" max="15" step="0.05" id="percentageRangeDOR" @onchange="CalculateDebentures" @bind="model.DORPercentage" @bind:event="oninput" />
                        </div>


                        <div class="form-group">
                            <div class="input-group"><input disabled="@false" @bind="model.DORPercentage" max="15" min="0" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
                        </div>
                    </section>
                    break;

                case DebentureType.ROR:
                    SwitchDebentureTypeAction();
                    <section class="w-100 p-4 pb-4">
                        <label for="percentageRangeROR" class="form-label">Referencyjna stopa oprocentowania</label>
                        <div class="range">
                            <input type="range" class="form-range" min="0" max="15" step="0.05" id="percentageRangeROR" @onchange="CalculateDebentures" @bind="model.RORPercentage" @bind:event="oninput" />
                        </div>

                        <div class="form-group" style="width:25%">
                            <div class="input-group"><input disabled="@false" @bind="model.RORPercentage" max="15" min="0" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
                        </div>
                    </section>
                    break;

                case DebentureType.TOS:
                    SwitchDebentureTypeAction();
                    <section class="w-100 p-4 pb-4">
                        <label for="percentageRangeTOS" class="form-label">Oprocentowanie</label>
                        <div class="range">
                            <input type="range" class="form-range" min="0" max="15" step="0.05" id="percentageRangeTOS" @onchange="CalculateDebentures" @bind="model.TOSPercentage" @bind:event="oninput" />
                        </div>

                        <div class="form-group" style="width:25%">
                            <div class="input-group"><input disabled="@false" @bind="model.TOSPercentage" max="15" min="0" class="form-control"><div class="input-group-append"><span class="input-group-text">%</span></div></div>
                        </div>
                    </section>
                    break;

                default:
                    break;
            }
            <p></p>
            <button class="btn btn-primary btn-center" type="submit">Oblicz</button>

        </EditForm>
    </div>
    @if (debentureResult != null && debentureResult.DebentureInfo != null)
    {
        <SummaryTable Content="debentureResult.DebentureInfo"></SummaryTable>

        @if (debentureResult.DebentureData.DebentureColumns != null)
        {
            <div class="table-responsive" style="max-height:300px">
                <table class="table table-bordered " style="align-content:center">
                    <thead>
                        <tr>
                            @foreach (var head in debentureResult.DebentureData.Head)
                            {
                                <th>
                                    @head.Head  @if (@head.ToolTip != null)
                                    {
                                        <Tooltip Text="@head.ToolTip"></Tooltip>
                                    }
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var column in debentureResult.DebentureData.DebentureColumns)
                        {
                        <td>
                                @foreach (var row in column.Rows)
                                {
                                    <tr>@row</tr>
                                } 
                        </td>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>


@code {
    public DebentureModel model = new DebentureModel();
    public Data.Debenture debentureResult;
    public bool DebentureDialogOpen { get; set; }

    private void OnDebentureInfoClose(bool accepted)
    {
        DebentureDialogOpen = false;
    }

    private void OpenDebentureInfoDialog()
    {
        DebentureDialogOpen = true;
    }

    private async Task CalculateDebentures()
    {
        if (!DebentureDialogOpen)
            debentureResult = await DebentureService.GetDebentureAsync(model);
    }

    private string InformationAboutDebenture()
    {
        return DebentureService.GetInformationAboutDebenture(model.Type);
    }

    private void SwitchDebentureTypeAction()
    {
        model.DOSPercentage = model.Type != DebentureType.DOS ? DefaultValue.Debenture.DOSPercentage : model.DOSPercentage;
        model.OTSPercentage = model.Type != DebentureType.OTS ? DefaultValue.Debenture.OTSPercentage : model.OTSPercentage;
        model.TOZPercentage = model.Type != DebentureType.TOZ ? DefaultValue.Debenture.TOZPercentage : model.TOZPercentage;
        model.RORPercentage = model.Type != DebentureType.ROR ? DefaultValue.Debenture.RORPercentage : model.RORPercentage;
        model.COIPercentage = model.Type != DebentureType.COI ? DefaultValue.Debenture.COIPercentage : model.COIPercentage;
        model.EDOPercentage = model.Type != DebentureType.EDO ? DefaultValue.Debenture.EDOPercentage : model.EDOPercentage;
        model.DORPercentage = model.Type != DebentureType.DOR ? DefaultValue.Debenture.DORPercentage : model.DORPercentage;

        if (debentureResult != null)
        {
            debentureResult.DebentureInfo.Clear();
            debentureResult.DebentureData.DebentureColumns = null;
            debentureResult.DebentureData.Head = null;
        }
    }

    private void UpdateEarlyRedemptionFee()
    {
        model.EarlyRedemptionFee = DefaultValue.Debenture.GetEarlyRedemptionFee(model.Type);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            CalculateDebentures().Wait();
        }
    }
}
