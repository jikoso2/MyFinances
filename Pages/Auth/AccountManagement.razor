@using MyFinances.Models
@using MyFinances.Data
@using MyFinances.Helpers
@using MyFinances.Data.DataBase
@using System.Threading
@using Microsoft.AspNetCore.Components.Web
@using MyFinances.Data.Auth
@using System.Security.Claims

@page "/accountmanagement"
@attribute [Authorize]

@inject Data.UserAccountService userAccountService;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;

<div class="card-header">
    Zmiana hasła
</div>

@if (isOpenFailAuthModal)
{
    <InfoModal OnClose="ChangeStateModifyAccountModal" Text="@resumeInfoAboutLogin" Title="Modyfikacja konta"></InfoModal>
}

<div class="card-body">
    <EditForm Model="model" OnValidSubmit="ApproveModification">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row justify-content-center">
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label>Nazwa użytkownika</label>
                        <div class="input-group"><input @bind="model.username" class="form-control" style="min-width: 75px"></div>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>Nowe hasło</label>
                        <div class="input-group"><input type="@TxtType" @bind="model.password" class="form-control" style="min-width: 75px"><div class="input-group-append"><span class='input-group-text'><span class='oi oi-dial' @onclick="ShowPassword"></span></span></div></div>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label>Adres e-mail</label>
                        <div class="input-group"><input @bind="model.email" class="form-control" style="min-width: 75px"></div>
                    </div>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-center" style="width:100px"> Zatwierdź zmiany </button>
    </EditForm>
</div>
<AuthorizeView>
    <Authorizing>
        <h1>Sprawdzanie zalogowanego użytkownika.</h1>
    </Authorizing>
    <NotAuthorized>
        <h1>Nie jesteś zalogowany.</h1>
    </NotAuthorized>
</AuthorizeView>
@code
{
    UserAccount model = new UserAccount();
    UserAccount user = new UserAccount();
    string TxtType = "password";

    string resumeInfoAboutLogin;
    bool isOpenFailAuthModal = false;
    private void ChangeStateModifyAccountModal() => isOpenFailAuthModal = !isOpenFailAuthModal;

    private async Task ApproveModification()
    {
        model.id = user.id;

        if (model.username != user.username && userAccountService.isUsernameExist(model.username))
        {
            resumeInfoAboutLogin = $"Istnieje już użytkownik o nazwie {model.username}";
            ChangeStateModifyAccountModal();
            return;
        }

        var result = await userAccountService.UpdateUserAccount(model);
        var userDB = await userAccountService.GetUserAccount(user.id);
        model.email = userDB.email;
        model.username = user.username;

        if (result.Count() > 0)
            resumeInfoAboutLogin = $"Pomyślnie zmienione: {string.Join(",", result)}";
        else
            resumeInfoAboutLogin = $"Nie dokonano żadnych zmian";

        ChangeStateModifyAccountModal();
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Identities.FirstOrDefault().Claims.FirstOrDefault(a => a.Type == System.Security.Claims.ClaimTypes.NameIdentifier).Value;

        user = await userAccountService.GetUserAccount(new Guid(userId));
        model.email = user.email;
        model.username = user.username;
    }

    public void ShowPassword()
    {
        if (this.TxtType == "password")
            this.TxtType = "text";
        else
            this.TxtType = "password";
    }
}
