@page "/loancalculator"

@using MyFinances.Models
@inject Data.LoanService LoanService



<div class="card mx-auto mt-5" style="width: 50rem;">
	<div class="card-header">
		Kalkulator Kredytu
	</div>
	<div class="card-body">
		<EditForm Model="@model" OnValidSubmit="CalculateLoan">

			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="row justify-content-center">

				<div class="form-group" style="margin: 15px">
					<label>Kwota Kredytu</label>
					<InputNumber @bind-Value="model.Amount" class="form-control" />
				</div>

				<div class="form-group" style="margin: 15px">
					<label>Czas trwania w miesiącach</label>
					<InputNumber @bind-Value="model.Duration" class="form-control" />
				</div>

				<div class="form-group" style="margin: 15px">
					<label>Oprocentowanie</label>
					<InputNumber @bind-Value="model.Percentage" class="form-control" />
				</div>

			</div>
			<button type="submit" class="btn btn-primary btn-center">Oblicz</button>
		</EditForm>
	</div>
	@if (calculatedLoan == null || calculatedLoan.LoanData == null)
	{
	}
	else
	{
	<p>
		<div class="card-footer">
			<div class="row">
				<div class="col">Kwota zaciągniętego kredytu</div>
				<div class="col text-right">@calculatedLoan.TotalAmount</div>
			</div>
			<div class="row">
				<div class="col">Całkowity koszt kredytu</div>
				<div class="col text-right">@calculatedLoan.TotalPaymentAmount</div>
			</div>
			<div class="row">
				<div class="col">Całkowita wartość odsetek</div>
				<div class="col text-right">@calculatedLoan.TotalAdditionalPayment</div>
			</div>
		</div>
	</p>
	<table class="table">
		<thead>
			<tr>
				@foreach (var head in calculatedLoan.LoanData.Head)
				{
					<th>@head</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var column in calculatedLoan.LoanData.LoanColumns)
			{
			<td>
				@foreach (var row in column.Rows)
				{
				<tr>@row</tr>
				}
				</td>
			}
			</tbody>
		</table>
	}
	</div>




	@code {
		private LoanModel model = new LoanModel();
		private Data.Loan calculatedLoan;

		private async Task CalculateLoan()
		{
			calculatedLoan = await LoanService.GetLoanAsync(model);
		}
	}